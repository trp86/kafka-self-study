Messages and Batches
=====================
The unit of data within Kafka is called a message. It is similar to a row or a record. A message is simply an array of bytes as far as Kafka is concerned, so the data contained within it does not have a specific format or meaning to Kafka. A message can have an optional bit of metadata, which is referred to as a key. The key is also a byte array and, as with the message, has no specific meaning to Kafka. Keys are used when messages are to be written to partitions in a more controlled manner. The simplest such scheme is to generate a consistent hash of the key, and then select the partition number for that message by taking the result of the hash modulo, the total number of partitions in the topic. This assures that messages with the same key are always written to the same partition.

For efficiency, messages are written into Kafka in batches. A batch is just a collection of messages, all of which are being produced to the same topic and partition. An individual roundtrip across the network for each message would result in excessive overhead, and collecting messages together into a batch reduces this. Of course, this is a tradeoff between latency and throughput: the larger the batches, the more messages that can be handled per unit of time, but the longer it takes an individual message to propagate. Batches are also typically compressed, providing more efficient data transfer and storage at the cost of some processing power.

Schemas
=========
Byte Arrays
Options avaliable for schema:- 1)XML 2)JSON 3)AVRO

Topics and Partitions
=====================
Messages in Kafka are categorized into topics. The closest analogies for a topic are a database table or a folder in a filesystem. Topics are additionally broken down into a number of partitions.Partition is a single log. Messages are written to it in an append-only fashion, and are read in order from beginning to end.

Note that as a topic typically has multiple partitions, there is no guarantee of message time-ordering across the entire topic, just within a single partition

Producers
===========
Producers create new messages. By default, the producer does not care what partition a specific message is written to and will balance messages over all partitions of a topic evenly.Producer can direct messages to specific partitions. This is typically done using the message key and a partitioner that will generate a hash of the key and map it to a specific partition. This assures that all messages produced with a given key will get written to the same partition. The producer could also use a custom partitioner.

Consumers
=========
Consumers read messages.

Messages and Batches
=====================
The unit of data within Kafka is called a message. It is similar to a row or a record. A message is simply an array of bytes as far as Kafka is concerned, so the data contained within it does not have a specific format or meaning to Kafka. A message can have an optional bit of metadata, which is referred to as a key. The key is also a byte array and, as with the message, has no specific meaning to Kafka. Keys are used when messages are to be written to partitions in a more controlled manner. The simplest such scheme is to generate a consistent hash of the key, and then select the partition number for that message by taking the result of the hash modulo, the total number of partitions in the topic. This assures that messages with the same key are always written to the same partition.

For efficiency, messages are written into Kafka in batches. A batch is just a collection of messages, all of which are being produced to the same topic and partition. An individual roundtrip across the network for each message would result in excessive overhead, and collecting messages together into a batch reduces this. Of course, this is a tradeoff between latency and throughput: the larger the batches, the more messages that can be handled per unit of time, but the longer it takes an individual message to propagate. Batches are also typically compressed, providing more efficient data transfer and storage at the cost of some processing power.

Schemas
=========
Byte Arrays
Options avaliable for schema:- 1)XML 2)JSON 3)AVRO

Topics and Partitions
=====================
Messages in Kafka are categorized into topics. The closest analogies for a topic are a database table or a folder in a filesystem. Topics are additionally broken down into a number of partitions.Partition is a single log. Messages are written to it in an append-only fashion, and are read in order from beginning to end.

Note that as a topic typically has multiple partitions, there is no guarantee of message time-ordering across the entire topic, just within a single partition

Producers
===========
Producers create new messages. By default, the producer does not care what partition a specific message is written to and will balance messages over all partitions of a topic evenly.Producer can direct messages to specific partitions. This is typically done using the message key and a partitioner that will generate a hash of the key and map it to a specific partition. This assures that all messages produced with a given key will get written to the same partition. The producer could also use a custom partitioner.

Consumers
=========
Consumers read messages.Consumer subscribes to one or more topics and reads the messages in the order in which they were produced.The consumer keeps track of which messages it has already consumed by keeping track of the offset of messages. The offset is another bit of metadata—an integer value that continually increases—that Kafka adds to each message as it is produced. Each message in a given partition has a unique offset. By storing the offset of the last consumed message for each partition, either in Zookeeper or in Kafka itself, a consumer can stop and restart without losing its place.



https://www.linkedin.com/in/soovendoo-kumar-parida-31623295/
https://www.linkedin.com/in/marymehr/
https://www.linkedin.com/in/ratnesh-jha-a1729026/
https://www.linkedin.com/in/abhinav-marla-560502a7/
https://www.linkedin.com/in/ranganathancse/
https://www.linkedin.com/in/sumitified/
https://www.linkedin.com/in/ying-keng-ng-94a44624/
https://www.linkedin.com/in/raja-azveen-raja-muhamad-33087a103/
https://www.linkedin.com/in/shakila-ruslan-ab1155b6/
https://www.linkedin.com/in/lai-har-1b802693/
https://www.linkedin.com/in/emelia-lye-6aa7a843/
https://www.linkedin.com/in/katrien-van-hover-54527418/
